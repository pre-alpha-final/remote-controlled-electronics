@page "/"

@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IJSRuntime JSRuntime

@if (!AuthService.UserAuthenticated)
{
	<h1>Hello, world!</h1>
	<div>Welcome to your new app.</div>
	<MasonryContainer RefreshToggle="_masonryRefreshToggle" Options=@(new { fitWidth = true })>
		@foreach (var item in _masonryList)
		{
			<MasonryItem>
				<div class="masonry-test" @onclick="OnClick">
					<Collapsible Collapsed="_collapsed">
						<div style="background-color: aliceblue;">Lorem ipsum<br />Lorem ipsum<br />Lorem ipsum<br />Lorem ipsum<br />Lorem ipsum<br />Lorem ipsum<br />Lorem ipsum<br />Lorem ipsum<br /></div>
					</Collapsible>
				</div>
			</MasonryItem>
		}
	</MasonryContainer>
}

@code {
	private List<int> _masonryList = new List<int>();
	private List<ElementReference?> _masonryListRef = new List<ElementReference?>();
	private bool _masonryRefreshToggle;
	private bool _collapsed;

	protected override void OnInitialized()
	{
		if (AuthService.UserAuthenticated == false)
		{
			//NavigationManager.NavigateTo("/auth/login");
		}

		Task.Run(async () =>
		{
			for (int i = 0; i < 30; i++)
			{
				await Task.Delay(100);
				_masonryList.Add(new Random().Next(100, 300));
				_masonryListRef.Add(null);
				await InvokeAsync(StateHasChanged);
			}
		});
	}

	private async Task OnClick()
	{
		_collapsed = !_collapsed;
		_ = Task.Run(async () =>
		{
			await Task.Delay(300);
			await InvokeAsync(StateHasChanged);
			await Task.Delay(300);
			await InvokeAsync(StateHasChanged);
		});
	}
}
