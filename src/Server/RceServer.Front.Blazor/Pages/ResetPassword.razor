@page "/auth/resetpassword"

@using Microsoft.AspNetCore.WebUtilities
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<div class="container">
	<h2>Reset Password</h2>
	<hr />
	@if (_formSubmitted == false || string.IsNullOrWhiteSpace(_error) == false)
	{
		<div class="col-md-4 align-self-center">
			<EditForm Model="_model" OnValidSubmit=@OnValidSubmit>
				<DataAnnotationsValidator />
				<div class="form-group">
					<label for="password">Password</label>
					<InputText id="password" type="password" class="form-control" @bind-Value="_model.Password" />
					<ValidationMessage class="text-red" For="@(() => _model.Password)" />
				</div>
				<div class="form-group">
					<label for="password2">Confirm password</label>
					<InputText id="password2" type="password" class="form-control" @bind-Value="_model.Password2" />
					<ValidationMessage class="text-red" For="@(() => _model.Password2)" />
				</div>
				<div class="form-group">
					<div class="text-red"> @_error </div>
				</div>
				<div class="form-group">
					<button type="submit" class="btn btn-primary">Reset</button>
				</div>
			</EditForm>
		</div>
	}
	else
	{
		<div class="col-md-4 align-self-center">
			Your password has been reset
		</div>
	}
</div>

@code {
	private ResetPasswordModel _model = new ResetPasswordModel();
	private bool _formSubmitted = false;
	private string _error = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
		if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("userId", out var userId) == false)
		{
			_error = "Invalid query";
			return;
		}
		if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var code) == false)
		{
			_error = "Invalid query";
			return;
		}
	}

	private async Task OnValidSubmit(EditContext editContext)
	{
		var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
		_model.UserId = QueryHelpers.ParseQuery(uri.Query)["userId"];
		_model.Code = QueryHelpers.ParseQuery(uri.Query)["code"];

		_error = null;
		_formSubmitted = false;
		_error = await AuthService.ResetPassword(_model);
		_formSubmitted = true;
	}
}
